atom_style         meso-molecular
dimension          3
newton             on
units              micro
read_data          final.data

variable           h         equal 2.0
variable           h_act     equal 3.0
variable 		   h_mix	 equal (${h}+${h_act})/2.0
variable           c     equal 100.0             # soundspeed for Tait's EOS
variable           dt    equal 0.0001
variable		   visc  equal 2357.8			 # viscosity in g/m*s (avg visc should be 2.3578 kg/m*s)

group              cbd type 1
group			   active type 2 
group			   solvent type 3
group  			   cbd_solvent type 1 3

group              slurry type 1 2 3
group              bc type 4

pair_style         hybrid/overlay sph/rhosum 1 sph/taitwater/morris
pair_coeff         * * sph/taitwater/morris 0.93 ${c} ${visc} ${h}
pair_coeff         * * sph/rhosum ${h}



timestep    ${dt}

# time-integrate position, velocities, internal energy and density of cbd particles
fix                integrate_slurry_fix slurry meso
# time-integrate only internal energy and density of boundary particles
fix                integrate_bc_fix bc meso/stationary

dump               dump_id all custom 10000 final_10000.lammpstrj id type mol xs ys zs
dump_modify        dump_id first yes
dump_modify 	   dump_id sort 3

#compute thermo_temp slurry temp
#thermo_modify temp slurry
uncompute thermo_temp
compute thermo_temp slurry temp
thermo             1000
thermo_style       custom step time temp press density lx ly lz
thermo_modify      norm no

neigh_modify       every 5 delay 0 check no
variable           skin equal 0.3*${h}
neighbor           ${skin} bin # set Verlet list skin distance

#fix make_rigid active rigid/nvt molecule temp 30000 3000 30
fix active_temp active nvt temp 30000 10000 30

variable g equal 9.8/1000000
fix add_gravity slurry gravity ${g} vector 0 0 -1  # Acceleration is micrometers/(microseconds)^2

variable wiggle_s equal swiggle(0,2000,10)
variable wiggle_c equal cwiggle(0,-2000,10)

#fix strong_gravity slurry addforce 0.0 0.0 -0.05

group stir_bar molecule 2
#fix stir_the_bar stir_bar addforce v_wiggle_s 0.0 v_wiggle_c
#fix stir cbd addforce v_wiggle_s 0.0 v_wiggle_c
fix stir slurry langevin 10000000000 10000000000 10 234 
#fix stir slurry nvt temp 10000000000 10000000000 10
group moving_surface molecule 1
#fix move_surface moving_surface move linear 0.09 0 0 # Speed is in m/s (coating speeds vary from 1/60 m/s to 10/60 m/s)

group bottom_wall type 6
group piston_wall type 5

variable piston_speed equal -0.06
variable surface_speed equal abs(${piston_speed}*3)

# Stir
run 300000


unfix stir
#unfix stir_the_bar

# Cool
#fix cool slurry langevin 300 300 10 234
#run 10000
#unfix cool

# Apply extra gravity
fix extra_gravity slurry addforce 0.0 0.0 -8.0
run 300000


unfix extra_gravity

# Move piston wall to starting position
variable dz equal bound(slurry,zmax)-bound(piston_wall,zmin)+0.2
displace_atoms piston_wall move 0 0 ${dz}
run 1000


# Expansion step
run 50000

#unfix active_temp
# Cooling step
#fix cool slurry langevin 300 300 10 234
fix cool cbd_solvent nvt temp 10000 10000 30
#fix cool active nvt temp 10000 10000 30

run 50000


#unfix cool
# Start moving piston wall and hopper

#fix more_gravity slurry addforce 0 0 -1

dump_modify        dump_id every 25000
#fix push_piston piston_wall move linear 0.0 0.0 ${piston_speed}
fix push_piston piston_wall move linear ${surface_speed} 0.0 ${piston_speed}
variable z_max equal bound(piston_wall,zmax)
variable z_min equal bound(bottom_wall,zmin)
variable run_length equal abs(floor((${z_max}-${z_min}-3)/(${piston_speed}*${dt})))
delete_atoms group bottom_wall
group walls type 4
group hopper subtract walls moving_surface
fix move_hopper hopper move linear ${surface_speed} 0.0 0.0
print ${run_length}

run 2000000
write_data semifinal10000.data
run ${run_length}
unfix push_piston

delete_atoms group piston_wall
delete_atoms group hopper
write_data final_large_10000.data

# Run with piston stopped
run ${run_length}
#run ${run_length}


